Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler # Penting jika Anda belum melakukan scaling pada tahap preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier # Contoh model lain
from sklearn.ensemble import RandomForestClassifier # Contoh model lain
from sklearn.svm import SVC # Contoh model lain
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# --- Bagian 0: Asumsi Data Sudah Bersih dan Dipreprocessed ---
# DALAM SKENARIO NYATA, ANDA AKAN MEMUAT DATA BERSIH DARI FILE ATAU HASIL PREPROCESSING SEBELUMNYA.
# KARENA SAYA TIDAK PUNYA DATA ASLI ANDA, SAYA AKAN MEMBUAT DUMMY DATA YANG SUDAH TERPREPROSES.

print("--- Membuat Dummy Dataset yang Sudah Dianggap Terpreproses untuk Demonstrasi Modeling ---")
np.random.seed(42) # Untuk reproduktifitas
df_preprocessed = pd.read_csv('diabetes_data_upload.csv')

# Fitur numerik (Age) yang sudah distandardisasi
age_scaled = np.random.randn(520) # Mengasumsikan sudah StandardScaler (mean=0, std=1)
# Fitur kategorikal biner (semua sudah 0/1)
polyuria = np.random.randint(0, 2, 520)
polydipsia = np.random.randint(0, 2, 520)
sudden_weight_loss = np.random.randint(0, 2, 520)
weakness = np.random.randint(0, 2, 520)
polyphagia = np.random.randint(0, 2, 520)
genital_thrush = np.random.randint(0, 2, 520)
visual_blurring = np.random.randint(0, 2, 520)
itching = np.random.randint(0, 2, 520)
irritability = np.random.randint(0, 2, 520)
delayed_healing = np.random.randint(0, 2, 520)
partial_paresis = np.random.randint(0, 2, 520)
muscle_stiffness = np.random.randint(0, 2, 520)
alopecia = np.random.randint(0, 2, 520)
obesity = np.random.randint(0, 2, 520)
gender = np.random.randint(0, 2, 520) # 0 for Female, 1 for Male

# Variabel target yang sudah 0/1
target_class = np.random.choice([0, 1], 520, p=[0.4, 0.6]) # 0=Negative, 1=Positive

data = {
    'Age': age_scaled,
    'Gender': gender,
    'Polyuria': polyuria,
    'Polydipsia': polydipsia,
    'Sudden Weight Loss': sudden_weight_loss,
    'Weakness': weakness,
    'Polyphagia': polyphagia,
    'Genital Thrush': genital_thrush,
    'Visual Blurring': visual_blurring,
    'Itching': itching,
    'Irritability': irritability,
    'Delayed Healing': delayed_healing,
    'Partial Paresis': partial_paresis,
    'Muscle Stiffness': muscle_stiffness,
    'Alopecia': alopecia,
    'Obesity': obesity,
    'Class': target_class
}
df_preprocessed = pd.DataFrame(data)

print("Dataset yang Dianggap Sudah Terpreproses:")
print(df_preprocessed.head())
print("\nInfo Dataset yang Dianggap Sudah Terpreproses:")
df_preprocessed.info()

# --- Bagian 1: Pembagian Data (Features X dan Target y) ---
print("\n--- 1. Pembagian Data (Training dan Testing) ---")

X = df_preprocessed.drop('Class', axis=1) # Fitur
y = df_preprocessed['Class']             # Target

# Pembagian data: 80% untuk pelatihan, 20% untuk pengujian
# stratify=y penting untuk klasifikasi biner agar proporsi kelas di train/test set sama
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"Ukuran X_train: {X_train.shape}")
print(f"Ukuran X_test: {X_test.shape}")
print(f"Proporsi kelas di y_train:\n{y_train.value_counts(normalize=True)}")
print(f"Proporsi kelas di y_test:\n{y_test.value_counts(normalize=True)}")


# --- Bagian 2: Pemilihan dan Pelatihan Model ---
print("\n--- 2. Pemilihan dan Pelatihan Model ---")

# --- Model 1: Logistic Regression ---
print("\n--- Melatih Model: Logistic Regression ---")
model_lr = LogisticRegression(random_state=42, solver='liblinear')
model_lr.fit(X_train, y_train)
print("Model Logistic Regression berhasil dilatih.")

# --- Model 2: Decision Tree Classifier ---
print("\n--- Melatih Model: Decision Tree Classifier ---")
model_dt = DecisionTreeClassifier(random_state=42)
model_dt.fit(X_train, y_train)
print("Model Decision Tree Classifier berhasil dilatih.")

# --- Model 3: Random Forest Classifier ---
print("\n--- Melatih Model: Random Forest Classifier ---")
model_rf = RandomForestClassifier(n_estimators=100, random_state=42) # n_estimators: jumlah pohon
model_rf.fit(X_train, y_train)
print("Model Random Forest Classifier berhasil dilatih.")

# --- Anda bisa menambahkan model lain di sini, contoh: ---
# from sklearn.svm import SVC
# model_svc = SVC(probability=True, random_state=42) # probability=True diperlukan untuk roc_auc_score
# model_svc.fit(X_train, y_train)
# print("Model Support Vector Machine berhasil dilatih.")


# --- Bagian 3: Prediksi dan Evaluasi Model ---
print("\n--- 3. Prediksi dan Evaluasi Model ---")

models = {
    "Logistic Regression": model_lr,
    "Decision Tree": model_dt,
    "Random Forest": model_rf,
    # "Support Vector Machine": model_svc # Aktifkan jika Anda melatih SVC
}

results = {}

for name, model in models.items():
    print(f"\n--- Evaluasi Model: {name} ---")
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred_proba)

    results[name] = {
        'Accuracy': accuracy,
        'Precision': precision,
        'Recall': recall,
        'F1-Score': f1,
        'ROC AUC': roc_auc
    }

    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1-Score: {f1:.4f}")
    print(f"ROC AUC Score: {roc_auc:.4f}")

    print("\nConfusion Matrix:")
    cm = confusion_matrix(y_test, y_pred)
    print(cm)
    plt.figure(figsize=(6, 5))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=['Predicted Negative', 'Predicted Positive'],
                yticklabels=['Actual Negative', 'Actual Positive'])
    plt.title(f'Confusion Matrix for {name}')
    plt.xlabel('Prediksi')
    plt.ylabel('Aktual')
    plt.show()

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred, target_names=['Negative', 'Positive']))

print("\n--- Ringkasan Hasil Evaluasi Semua Model ---")
results_df = pd.DataFrame(results).T # Transpose untuk tampilan yang lebih baik
print(results_df)

# Visualisasi perbandingan metrik utama
results_df[['Accuracy', 'F1-Score', 'ROC AUC']].plot(kind='bar', figsize=(12, 7))
plt.title('Perbandingan Performa Model')
plt.ylabel('Score')
plt.ylim(0, 1)
plt.xticks(rotation=45, ha='right')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

print("\nModeling dan Evaluasi Selesai.")
print("Pilih model terbaik berdasarkan metrik yang paling relevan dengan tujuan Anda (misalnya, Recall tinggi untuk meminimalkan False Negatives dalam deteksi penyakit).")
------------------

----- stdout -----
--- Membuat Dummy Dataset yang Sudah Dianggap Terpreproses untuk Demonstrasi Modeling ---
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[4], line 19[0m
[1;32m     17[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m--- Membuat Dummy Dataset yang Sudah Dianggap Terpreproses untuk Demonstrasi Modeling ---[39m[38;5;124m"[39m)
[1;32m     18[0m np[38;5;241m.[39mrandom[38;5;241m.[39mseed([38;5;241m42[39m) [38;5;66;03m# Untuk reproduktifitas[39;00m
[0;32m---> 19[0m df_preprocessed [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mread_csv[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mdiabetes_data_upload.csv[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m     21[0m [38;5;66;03m# Fitur numerik (Age) yang sudah distandardisasi[39;00m
[1;32m     22[0m age_scaled [38;5;241m=[39m np[38;5;241m.[39mrandom[38;5;241m.[39mrandn([38;5;241m520[39m) [38;5;66;03m# Mengasumsikan sudah StandardScaler (mean=0, std=1)[39;00m

File [0;32m~/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

File [0;32m~/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m~/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mengine[49m[43m)[49m

File [0;32m~/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m [43mget_handle[49m[43m([49m
[1;32m   1881[0m [43m    [49m[43mf[49m[43m,[49m
[1;32m   1882[0m [43m    [49m[43mmode[49m[43m,[49m
[1;32m   1883[0m [43m    [49m[43mencoding[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1884[0m [43m    [49m[43mcompression[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mcompression[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1885[0m [43m    [49m[43mmemory_map[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mmemory_map[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[1;32m   1886[0m [43m    [49m[43mis_text[49m[38;5;241;43m=[39;49m[43mis_text[49m[43m,[49m
[1;32m   1887[0m [43m    [49m[43merrors[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding_errors[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mstrict[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m,[49m
[1;32m   1888[0m [43m    [49m[43mstorage_options[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mstorage_options[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1889[0m [43m[49m[43m)[49m
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m~/.local/lib/python3.12/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28;43mopen[39;49m[43m([49m
[1;32m    874[0m [43m            [49m[43mhandle[49m[43m,[49m
[1;32m    875[0m [43m            [49m[43mioargs[49m[38;5;241;43m.[39;49m[43mmode[49m[43m,[49m
[1;32m    876[0m [43m            [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mioargs[49m[38;5;241;43m.[39;49m[43mencoding[49m[43m,[49m
[1;32m    877[0m [43m            [49m[43merrors[49m[38;5;241;43m=[39;49m[43merrors[49m[43m,[49m
[1;32m    878[0m [43m            [49m[43mnewline[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    879[0m [43m        [49m[43m)[49m
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'diabetes_data_upload.csv'

